# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Ohhanahana CD Pipeline

on:
  push:
    branches: [ "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # 소스 코드를 체크아웃합니다.
      - name: Checkout code
        uses: actions/checkout@v4

      # Docker Buildx를 설정합니다.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # AWS CLI 설치
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # AWS ECR에 로그인합니다.
      - name: Login to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # 서브모듈을 포함하여 소스 코드를 다시 체크아웃합니다.
      - name: Checkout submodule
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.ACTIONS_TOKEN }}

      # 서브모듈을 업데이트합니다.
      - name: Update submodule
        run: |
          git submodule update --remote --recursive

      # 스크립트 파일에 실행 권한을 부여합니다.
      - name: Make deploy script executable
        run: chmod +x scripts/deploy.sh

      # 기존 이미지를 삭제합니다. 이미지가 없는 경우 무시하고 넘어갑니다.
      - name: Delete existing Docker images in ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          IMAGE_TAG=latest
          REPO_NAME=${{ secrets.ECR_REPOSITORY }}
          REGISTRY_ID=$(aws sts get-caller-identity --query "Account" --output text)
          # 기존 이미지가 있는지 확인
          IMAGE_IDS=$(aws ecr list-images --repository-name $REPO_NAME --query "imageIds[?imageTag=='$IMAGE_TAG']" --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageTag=$IMAGE_TAG
          fi

      # Docker 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest  # 동적으로 태그 설정 가능
        run: |
          # Active profile을 main으로 지정해서 build
          docker build --build-arg SPRING_PROFILES_ACTIVE=main -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # AWS CLI를 사용하여 CodeDeploy 배포 트리거
      - name: Deploy to EC2 using CodeDeploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          APPLICATION_NAME: ohhanahana-app
          DEPLOYMENT_GROUP_NAME: ohhanahana-bg
        run: |
          aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP_NAME \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --description "Deploying the latest Docker image"
